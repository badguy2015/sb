
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    server {
        listen       80;
        server_name  localhost; #域名
        root   D:/wnmp/nginx_1-14_0/htdocs; #路径
        location / {
        	#设置index 默认后续，优先顺序从左至右
            index  index.php index.html; 
        }
        location ~ \.php$ {
        	#指定FastCGI服务器监听端口与地址，可以是本机或者其它
            fastcgi_pass   127.0.0.1:9000;
            #该指令用于设置nginx的默认首页文件（在这里指定fastcgi_index  其实是没有用的，因为前面的location ~* \.php$已经把“/结束”这种情况排除了）
            # fastcgi_index  index.php;
            #脚本文件请求的路
            #$document_root：网站的根目录，在server配置中root指
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }

    server {
        listen       80;
        server_name  www.local; #域名
        root   E:/www; #路径
        location / {
        	#设置index 默认后续，优先顺序从左至右
            index  index.php index.html; 
            #开启文件索引
            autoindex on;
            autoindex_exact_size off; #默认为on，显示出文件的确切大小，单位是bytes。 改为off后，显示出文件的大概大小，单位是kB或者MB或者GB
			autoindex_localtime on; #默认为off，显示的文件时间为GMT时间。改为on后，显示的文件时间为文件的服务器时间
        }
        location ~ \.php$ {
        	#指定FastCGI服务器监听端口与地址，可以是本机或者其它
            fastcgi_pass   127.0.0.1:9000;
            #该指令用于设置nginx的默认首页文件（在这里指定fastcgi_index  其实是没有用的，因为前面的location ~* \.php$已经把“/结束”这种情况排除了）
            # fastcgi_index  index.php;
            #脚本文件请求的路
            #$document_root：网站的根目录，在server配置中root指
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }

            
    # 19
    # szsd2.local
    server {
        listen       80;
        server_name  szsd2.local;
        root         "E:/www/local/szsd_v2/trunk/public";
        charset      utf-8;

        #access_log  logs/host.access.log  main;

        rewrite      ".*\.(js|gif|png|jpg|jpeg|css|php|htm|swf|htc|xml|ico|cur)$" $uri last;
        rewrite      ".*" /index.php last;
                
        location / {
            index  index.php index.html index.htm;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
                
        location = /50x.html {
            root   html;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
            fastcgi_pass   127.0.0.1:9000;
            fastcgi_index  index.php;   
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            fastcgi_param  CONFIG_TYPE  global;
            include        fastcgi_params;
        }

        # deny access to .htaccess files, if Apache's document root
        # concurs with nginx's one
        #
        #location ~ /\.ht {
        #    deny  all;
        #}
    }
    # 22
    # myygw.local
    server {
        listen 80;
        server_name    myygw.local;
        # access_log    /app/logs/nginx/mydomain_access.log;
        # error_log    /app/logs/nginx/mydomain_error.log;
        set   $root   E:/www/local/myygw/public;
        
        root E:/www/local/myygw/public ;
        
        location / {
            
            index    index.html index.php;
            if ( -f $request_filename) {
                break;
            }
            if ( !-e $request_filename) {
                #rewrite 规则 定向路径 重写类型;
                rewrite ^(.*)$ /index.php/$1 last;
                break;
            }
        }
        location ~ .+\.php($|/) {
            set $script $uri;
            set $path_info "";
            if ($uri ~ "^(.+\.php)(/.+)") {
                set $script $1;
                set $path_info $2;
            }
         #   fastcgi_pass    unix:/run/php/php7.0-fpm.sock;
        fastcgi_pass   127.0.0.1:9000;
            fastcgi_index    index.php?IF_REWRITE=1;
            fastcgi_param    PATH_INFO    $path_info;
            fastcgi_param    SCRIPT_FILENAME    $root$fastcgi_script_name;
            fastcgi_param    SCRIPT_NAME    $script;
            include        fastcgi_params;
        }
    }

    #sb
    server {
        listen       80;
        server_name  sb.local; #域名
        root E:/www/sb/public;#路径
        location / {
        	#设置index 默认后续，优先顺序从左至右
            index  index.php index.html; 
            if (-f $request_filename){
            	break;
            }
            if (!-e $request_filename){
            	rewrite ^(.*)$ /index.php/$1 last;
            }
        }
        location ~ \.php {
        	#指定FastCGI服务器监听端口与地址，可以是本机或者其它
            fastcgi_pass   127.0.0.1:9000;
            #该指令用于设置nginx的默认首页文件（在这里指定fastcgi_index  其实是没有用的，因为前面的location ~* \.php$已经把“/结束”这种情况排除了）
            fastcgi_split_path_info  ^(.+\.php)(.*)$;
            fastcgi_param PATH_INFO $fastcgi_path_info;
            # fastcgi_index  index.php;
            #脚本文件请求的路
            #$document_root：网站的根目录，在server配置中root指
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }
    #===========Demo=============
    server {
        listen       80;
        server_name  demo.demo; #域名
        root   E:/www/demo; #路径
        location / {
            #允许访问目录
            autoindex on;
            index  index.php index.html; 
        }
        location ~ \.php$ {
            #指定FastCGI服务器监听端口与地址，可以是本机或者其它
            fastcgi_pass   127.0.0.1:9000;
            #该指令用于设置nginx的默认首页文件（在这里指定fastcgi_index  其实是没有用的，因为前面的location ~* \.php$已经把“/结束”这种情况排除了）
            # fastcgi_index  index.php;
            #脚本文件请求的路
            #$document_root：网站的根目录，在server配置中root指
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }
    
    server {
        listen       80;
        server_name  tcpdf.demo; #域名
        root   E:/www/demo/tcpdf; #路径
        location / {
            #允许访问目录
            autoindex on;
            index  index.php index.html; 
        }
        location ~ \.php$ {
            #指定FastCGI服务器监听端口与地址，可以是本机或者其它
            fastcgi_pass   127.0.0.1:9000;
            #该指令用于设置nginx的默认首页文件（在这里指定fastcgi_index  其实是没有用的，因为前面的location ~* \.php$已经把“/结束”这种情况排除了）
            # fastcgi_index  index.php;
            #脚本文件请求的路
            #$document_root：网站的根目录，在server配置中root指
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }
    server {
        listen       80;
        server_name  html2pdf.demo; #域名
        root   E:/www/demo/html2pdf; #路径
        location / {
            #允许访问目录
            autoindex on;
            index  index.php index.html; 
        }
        location ~ \.php$ {
            #指定FastCGI服务器监听端口与地址，可以是本机或者其它
            fastcgi_pass   127.0.0.1:9000;
            #该指令用于设置nginx的默认首页文件（在这里指定fastcgi_index  其实是没有用的，因为前面的location ~* \.php$已经把“/结束”这种情况排除了）
            # fastcgi_index  index.php;
            #脚本文件请求的路
            #$document_root：网站的根目录，在server配置中root指
            fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
            include        fastcgi_params;
        }
    }
    # tp5.demo
    server {
        listen       80;
        server_name  tp5.demo; #域名
        root   E:/www/demo/tp51/public; #路径
        location / {
            #允许访问目录
            autoindex on;
            index  index.php index.html;
            # 存在文件，则直接返回
            if (-f $request_filename){
                break;
            }
            #不存在文件且不存在文件夹，则重写
            if ( !-e $request_filename) {
                #rewrite 规则 定向路径 重写类型;
                rewrite ^(.*)$ /index.php/$1 last;
                break;
            }
        }

        location ~ ^(.+\.php)(.*)$ {
             fastcgi_pass   127.0.0.1:9000;
             fastcgi_index  index.php;
             ##增加 fastcgi_split_path_info指令，将URI匹配成PHP脚本的URI和pathinfo两个变量
             ##即$fastcgi_script_name 和$fastcgi_path_info
             fastcgi_split_path_info  ^(.+\.php)(.*)$;
             ##PHP中要能读取到pathinfo这个变量
             ##就要通过fastcgi_param指令将fastcgi_split_path_info指令匹配到的pathinfo部分赋值给PATH_INFO
             ##这样PHP中$_SERVER['PATH_INFO']才会存在值
             fastcgi_param PATH_INFO $fastcgi_path_info;
             ##在将这个请求的URI匹配完毕后，检查这个绝对地址的PHP脚本文件是否存在
             ##如果这个PHP脚本文件不存在就不用交给php-fpm来执行了
             ##否者页面将出现由php-fpm返回的:`File not found.`的提示
             if (!-e $document_root$fastcgi_script_name) {
                 ##此处直接返回404错误
                 ##你也可以rewrite 到新地址去，然后break;
                 return 404;
             }
             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;
             include        fastcgi_params;
        }
    }
    #===========Demo=============

}
